package com.mapbox.services.android.navigation.ui.v5.stylekit;

import android.graphics.Paint;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import java.util.Stack;



/**
 * Created on Oct 11, 2017.
 * Copyright Â© 2017 Mapbox. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 */
public class ManeuversStyleKit {
    
    
    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }
    
    // Canvas Drawings
    // Maneuvers
    
    private static class CacheForArrow180 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawArrow180(Canvas canvas, int primaryColor, float scale) {
        ManeuversStyleKit.drawArrow180(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, scale);
    }
    
    public static void drawArrow180(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForArrow180.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForArrow180.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForArrow180.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 2
        {
            canvas.save();
            canvas.translate(24.5f, 26.5f);
            currentTransformation.peek().postTranslate(24.5f, 26.5f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForArrow180.bezierRect;
            bezierRect.set(-2.49f, -0.5f, 15.51f, 13.49f);
            Path bezierPath = CacheForArrow180.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(-2.36f, 1.3f);
            bezierPath.lineTo(6.51f, 13.49f);
            bezierPath.lineTo(15.37f, 1.3f);
            bezierPath.cubicTo(15.45f, 1.21f, 15.51f, 1.09f, 15.51f, 0.96f);
            bezierPath.cubicTo(15.51f, 0.69f, 15.28f, 0.46f, 15.01f, 0.46f);
            bezierPath.cubicTo(14.97f, 0.46f, 14.89f, 0.47f, 14.89f, 0.47f);
            bezierPath.lineTo(9.15f, 2.44f);
            bezierPath.cubicTo(9.11f, 2.45f, 9.06f, 2.46f, 9.01f, 2.46f);
            bezierPath.cubicTo(8.74f, 2.46f, 8.51f, 2.26f, 8.51f, 2f);
            bezierPath.cubicTo(8.51f, 1.63f, 8.51f, -0.5f, 8.51f, -0.5f);
            bezierPath.lineTo(6.51f, -0.5f);
            bezierPath.lineTo(4.5f, -0.5f);
            bezierPath.cubicTo(4.5f, -0.5f, 4.51f, 1.63f, 4.51f, 2f);
            bezierPath.cubicTo(4.51f, 2.26f, 4.28f, 2.47f, 4.01f, 2.47f);
            bezierPath.cubicTo(3.96f, 2.47f, 3.91f, 2.46f, 3.86f, 2.45f);
            bezierPath.lineTo(-1.88f, 0.48f);
            bezierPath.cubicTo(-1.88f, 0.48f, -1.95f, 0.46f, -1.99f, 0.46f);
            bezierPath.cubicTo(-2.27f, 0.46f, -2.49f, 0.69f, -2.49f, 0.96f);
            bezierPath.cubicTo(-2.49f, 1.09f, -2.44f, 1.21f, -2.36f, 1.3f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezierPath, paint);
            
            // Bezier 2
            RectF bezier2Rect = CacheForArrow180.bezier2Rect;
            bezier2Rect.set(-6.5f, -13.5f, 6.5f, 13.5f);
            Path bezier2Path = CacheForArrow180.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(-6.5f, 13.5f);
            bezier2Path.lineTo(-6.5f, -6.66f);
            bezier2Path.cubicTo(-6.5f, -10.41f, -3.55f, -13.5f, 0f, -13.5f);
            bezier2Path.cubicTo(3.59f, -13.5f, 6.5f, -10.22f, 6.5f, -6.65f);
            bezier2Path.lineTo(6.5f, 2.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForArrow45 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawArrow45(Canvas canvas, int primaryColor, float scale) {
        ManeuversStyleKit.drawArrow45(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, scale);
    }
    
    public static void drawArrow45(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForArrow45.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForArrow45.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForArrow45.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Bezier
        canvas.save();
        canvas.translate(24.01f, 25.99f);
        currentTransformation.peek().postTranslate(24.01f, 25.99f);
        canvas.scale(scale, scale);
        currentTransformation.peek().postScale(scale, scale);
        RectF bezierRect = CacheForArrow45.bezierRect;
        bezierRect.set(-14.01f, -15.01f, 14.01f, 15.01f);
        Path bezierPath = CacheForArrow45.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(-10.01f, 15.01f);
        bezierPath.lineTo(-10.01f, 1f);
        bezierPath.cubicTo(-10f, 0.49f, -9.84f, -3.99f, -5.05f, -3.99f);
        bezierPath.lineTo(2.57f, -3.99f);
        bezierPath.cubicTo(2.8f, -3.95f, 2.98f, -3.75f, 2.98f, -3.51f);
        bezierPath.cubicTo(2.98f, -3.46f, 2.97f, -3.41f, 2.96f, -3.36f);
        bezierPath.lineTo(0.99f, 2.38f);
        bezierPath.cubicTo(0.99f, 2.38f, 0.98f, 2.45f, 0.98f, 2.49f);
        bezierPath.cubicTo(0.98f, 2.77f, 1.2f, 2.99f, 1.48f, 2.99f);
        bezierPath.cubicTo(1.61f, 2.99f, 1.73f, 2.94f, 1.82f, 2.86f);
        bezierPath.lineTo(14.01f, -6.01f);
        bezierPath.lineTo(1.82f, -14.87f);
        bezierPath.cubicTo(1.73f, -14.95f, 1.61f, -15.01f, 1.48f, -15.01f);
        bezierPath.cubicTo(1.2f, -15.01f, 0.98f, -14.78f, 0.98f, -14.51f);
        bezierPath.cubicTo(0.98f, -14.47f, 0.99f, -14.4f, 0.99f, -14.4f);
        bezierPath.lineTo(2.96f, -8.65f);
        bezierPath.cubicTo(2.97f, -8.61f, 2.98f, -8.56f, 2.98f, -8.51f);
        bezierPath.cubicTo(2.98f, -8.24f, 2.76f, -8.01f, 2.5f, -8.01f);
        bezierPath.cubicTo(2.14f, -8.01f, -5.05f, -7.99f, -5.05f, -7.99f);
        bezierPath.cubicTo(-11.58f, -7.99f, -13.99f, -2.63f, -14.01f, 0.99f);
        bezierPath.lineTo(-14.01f, 15.01f);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(primaryColor);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForArrow30 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF clipRect = new RectF();
    }
    
    public static void drawArrow30(Canvas canvas, int primaryColor, float scale) {
        ManeuversStyleKit.drawArrow30(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, scale);
    }
    
    public static void drawArrow30(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForArrow30.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForArrow30.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForArrow30.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 3
        {
            canvas.save();
            canvas.translate(27.78f, 25.24f);
            currentTransformation.peek().postTranslate(27.78f, 25.24f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier 3
            RectF bezier3Rect = CacheForArrow30.bezier3Rect;
            bezier3Rect.set(-11.92f, -5.39f, -2.59f, 14.76f);
            Path bezier3Path = CacheForArrow30.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(-2.59f, -5.39f);
            bezier3Path.lineTo(-10.13f, 1.58f);
            bezier3Path.cubicTo(-11.29f, 3.33f, -11.92f, 5.45f, -11.92f, 7.63f);
            bezier3Path.lineTo(-11.92f, 14.76f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForArrow30.bezier4Rect;
            bezier4Rect.set(-7.16f, -13.06f, 6.22f, -0f);
            Path bezier4Path = CacheForArrow30.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(-6.63f, -12.35f);
            bezier4Path.lineTo(6.22f, -13.06f);
            bezier4Path.lineTo(3.65f, -0.45f);
            bezier4Path.cubicTo(3.64f, -0.33f, 3.58f, -0.21f, 3.48f, -0.12f);
            bezier4Path.cubicTo(3.27f, 0.06f, 2.96f, 0.04f, 2.78f, -0.17f);
            bezier4Path.cubicTo(2.75f, -0.2f, 2.71f, -0.27f, 2.71f, -0.27f);
            bezier4Path.lineTo(0.34f, -4.49f);
            bezier4Path.cubicTo(0.32f, -4.53f, 0.3f, -4.57f, 0.26f, -4.61f);
            bezier4Path.cubicTo(0.09f, -4.82f, -0.41f, -4.68f, -0.61f, -4.51f);
            bezier4Path.cubicTo(-0.89f, -4.28f, -2.7f, -2.71f, -2.7f, -2.71f);
            bezier4Path.lineTo(-4.01f, -4.22f);
            bezier4Path.lineTo(-5.32f, -5.74f);
            bezier4Path.cubicTo(-5.32f, -5.74f, -3.5f, -7.3f, -3.23f, -7.54f);
            bezier4Path.cubicTo(-3.03f, -7.71f, -2.92f, -8.11f, -3.1f, -8.31f);
            bezier4Path.cubicTo(-3.13f, -8.35f, -3.12f, -8.42f, -3.16f, -8.45f);
            bezier4Path.lineTo(-6.97f, -11.43f);
            bezier4Path.cubicTo(-6.97f, -11.43f, -7.02f, -11.48f, -7.04f, -11.51f);
            bezier4Path.cubicTo(-7.22f, -11.72f, -7.19f, -12.04f, -6.99f, -12.22f);
            bezier4Path.cubicTo(-6.89f, -12.31f, -6.76f, -12.35f, -6.63f, -12.35f);
            bezier4Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier4Path, paint);
            
            // Clip
            RectF clipRect = CacheForArrow30.clipRect;
            clipRect.set(-13.78f, -14f, 6.62f, 12.75f);
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForArrow0 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawArrow0(Canvas canvas, int primaryColor, float scale) {
        ManeuversStyleKit.drawArrow0(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, scale);
    }
    
    public static void drawArrow0(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForArrow0.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForArrow0.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForArrow0.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Bezier
        canvas.save();
        canvas.translate(25f, 25.02f);
        currentTransformation.peek().postTranslate(25f, 25.02f);
        canvas.scale(scale, scale);
        currentTransformation.peek().postScale(scale, scale);
        RectF bezierRect = CacheForArrow0.bezierRect;
        bezierRect.set(-9f, -15.02f, 9f, 15.02f);
        Path bezierPath = CacheForArrow0.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(8.86f, -2.82f);
        bezierPath.lineTo(0f, -15.02f);
        bezierPath.lineTo(-8.86f, -2.82f);
        bezierPath.cubicTo(-8.95f, -2.73f, -9f, -2.62f, -9f, -2.48f);
        bezierPath.cubicTo(-9f, -2.21f, -8.78f, -1.98f, -8.5f, -1.98f);
        bezierPath.cubicTo(-8.46f, -1.98f, -8.39f, -2f, -8.39f, -2f);
        bezierPath.lineTo(-2.64f, -3.96f);
        bezierPath.cubicTo(-2.6f, -3.98f, -2.55f, -3.98f, -2.5f, -3.98f);
        bezierPath.cubicTo(-2.23f, -3.98f, -2f, -3.76f, -2f, -3.5f);
        bezierPath.lineTo(-2f, 15.02f);
        bezierPath.lineTo(2f, 15.02f);
        bezierPath.cubicTo(2f, 15.02f, 2f, -3.14f, 2f, -3.5f);
        bezierPath.cubicTo(2f, -3.76f, 2.23f, -3.98f, 2.5f, -3.98f);
        bezierPath.cubicTo(2.55f, -3.98f, 2.6f, -3.98f, 2.64f, -3.96f);
        bezierPath.lineTo(8.39f, -2f);
        bezierPath.cubicTo(8.39f, -2f, 8.46f, -1.98f, 8.5f, -1.98f);
        bezierPath.cubicTo(8.78f, -1.98f, 9f, -2.21f, 9f, -2.48f);
        bezierPath.cubicTo(9f, -2.62f, 8.95f, -2.73f, 8.86f, -2.82f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(primaryColor);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForArrow75 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawArrow75(Canvas canvas, int primaryColor, float scale) {
        ManeuversStyleKit.drawArrow75(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, scale);
    }
    
    public static void drawArrow75(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForArrow75.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForArrow75.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForArrow75.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 2
        {
            canvas.save();
            canvas.translate(27.12f, 27.5f);
            currentTransformation.peek().postTranslate(27.12f, 27.5f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForArrow75.bezierRect;
            bezierRect.set(-3.12f, -10.97f, 12.12f, 4.5f);
            Path bezierPath = CacheForArrow75.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(-2.66f, 1.57f);
            bezierPath.lineTo(12.12f, 4.5f);
            bezierPath.lineTo(10.35f, -10.47f);
            bezierPath.cubicTo(10.35f, -10.59f, 10.31f, -10.71f, 10.22f, -10.81f);
            bezierPath.cubicTo(10.04f, -11.01f, 9.72f, -11.03f, 9.52f, -10.84f);
            bezierPath.cubicTo(9.49f, -10.81f, 9.44f, -10.75f, 9.44f, -10.75f);
            bezierPath.lineTo(6.56f, -5.41f);
            bezierPath.cubicTo(6.54f, -5.37f, 6.51f, -5.33f, 6.47f, -5.3f);
            bezierPath.cubicTo(6.27f, -5.11f, 5.96f, -5.12f, 5.78f, -5.31f);
            bezierPath.cubicTo(5.53f, -5.57f, 4.08f, -7.15f, 4.08f, -7.15f);
            bezierPath.lineTo(2.61f, -5.79f);
            bezierPath.lineTo(1.14f, -4.43f);
            bezierPath.cubicTo(1.14f, -4.43f, 2.6f, -2.86f, 2.84f, -2.59f);
            bezierPath.cubicTo(3.02f, -2.4f, 3f, -2.08f, 2.8f, -1.9f);
            bezierPath.cubicTo(2.77f, -1.86f, 2.72f, -1.84f, 2.68f, -1.82f);
            bezierPath.lineTo(-2.87f, 0.64f);
            bezierPath.cubicTo(-2.87f, 0.64f, -2.94f, 0.68f, -2.96f, 0.7f);
            bezierPath.cubicTo(-3.17f, 0.89f, -3.18f, 1.21f, -2.99f, 1.41f);
            bezierPath.cubicTo(-2.9f, 1.51f, -2.78f, 1.56f, -2.66f, 1.57f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezierPath, paint);
            
            // Bezier 3
            RectF bezier3Rect = CacheForArrow75.bezier3Rect;
            bezier3Rect.set(-12.12f, -11.5f, 3.88f, 11.5f);
            Path bezier3Path = CacheForArrow75.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(-12.12f, -7f);
            bezier3Path.cubicTo(-12.12f, -7f, -12.33f, -11.5f, -7.62f, -11.5f);
            bezier3Path.cubicTo(-2.92f, -11.5f, 0.88f, -7.5f, 0.88f, -7.5f);
            bezier3Path.lineTo(3.88f, -4.5f);
            bezier3Path.moveTo(-12.12f, -7.5f);
            bezier3Path.lineTo(-12.12f, -1.5f);
            bezier3Path.moveTo(-12.12f, -1.5f);
            bezier3Path.lineTo(-12.12f, 0.5f);
            bezier3Path.moveTo(-12.12f, 0.5f);
            bezier3Path.lineTo(-12.12f, 11.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForArriveright {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawArriveright(Canvas canvas, int primaryColor, int secondaryColor, float scale) {
        ManeuversStyleKit.drawArriveright(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, scale);
    }
    
    public static void drawArriveright(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForArriveright.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForArriveright.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForArriveright.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 3
        {
            canvas.save();
            canvas.translate(25.1f, 24.17f);
            currentTransformation.peek().postTranslate(25.1f, 24.17f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForArriveright.bezierRect;
            bezierRect.set(-13.05f, -10.17f, -13.05f, 14.83f);
            Path bezierPath = CacheForArriveright.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(-13.05f, -10.17f);
            bezierPath.lineTo(-13.05f, 14.83f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(secondaryColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForArriveright.bezier2Rect;
            bezier2Rect.set(-13.1f, -0.17f, -7.05f, 14.83f);
            Path bezier2Path = CacheForArriveright.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(-13.05f, 14.83f);
            bezier2Path.lineTo(-13.05f, 6.8f);
            bezier2Path.cubicTo(-13.05f, 6.8f, -14.01f, -0.17f, -7.09f, -0.17f);
            bezier2Path.lineTo(-7.05f, -0.17f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForArriveright.bezier3Rect;
            bezier3Rect.set(-2.99f, -8.17f, 8.53f, 7.83f);
            Path bezier3Path = CacheForArriveright.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(-2.99f, 1.83f);
            bezier3Path.cubicTo(-2.99f, 1.83f, -2.59f, 1.83f, -2.23f, 1.83f);
            bezier3Path.cubicTo(-1.97f, 1.83f, -1.62f, 2.05f, -1.62f, 2.33f);
            bezier3Path.cubicTo(-1.62f, 2.38f, -1.57f, 2.42f, -1.58f, 2.47f);
            bezier3Path.lineTo(-2.52f, 7.21f);
            bezier3Path.cubicTo(-2.52f, 7.21f, -2.52f, 7.29f, -2.52f, 7.33f);
            bezier3Path.cubicTo(-2.52f, 7.6f, -2.28f, 7.83f, -2.01f, 7.83f);
            bezier3Path.cubicTo(-1.88f, 7.83f, -1.75f, 7.77f, -1.66f, 7.69f);
            bezier3Path.lineTo(8.53f, -0.17f);
            bezier3Path.lineTo(-1.66f, -8.04f);
            bezier3Path.cubicTo(-1.75f, -8.12f, -1.87f, -8.17f, -2f, -8.17f);
            bezier3Path.cubicTo(-2.28f, -8.17f, -2.5f, -7.95f, -2.5f, -7.67f);
            bezier3Path.cubicTo(-2.5f, -7.64f, -2.49f, -7.56f, -2.49f, -7.56f);
            bezier3Path.lineTo(-1.52f, -2.82f);
            bezier3Path.cubicTo(-1.51f, -2.77f, -1.5f, -2.72f, -1.5f, -2.67f);
            bezier3Path.cubicTo(-1.5f, -2.4f, -1.97f, -2.17f, -2.23f, -2.17f);
            bezier3Path.cubicTo(-2.59f, -2.17f, -2.99f, -2.18f, -2.99f, -2.18f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            
            // Oval
            RectF ovalRect = CacheForArriveright.ovalRect;
            ovalRect.set(9.85f, -3.37f, 15.95f, 2.73f);
            Path ovalPath = CacheForArriveright.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(ovalPath, paint);
            
            // Rectangle
            RectF rectangleRect = CacheForArriveright.rectangleRect;
            rectangleRect.set(-5.97f, -2.17f, -4.02f, 1.83f);
            Path rectanglePath = CacheForArriveright.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(rectanglePath, paint);
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForArrive {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF ovalRect = new RectF();
        private static Path ovalPath = new Path();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
    }
    
    public static void drawArrive(Canvas canvas, int primaryColor, float scale) {
        ManeuversStyleKit.drawArrive(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, scale);
    }
    
    public static void drawArrive(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForArrive.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForArrive.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForArrive.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 2
        {
            canvas.save();
            canvas.translate(25f, 24.57f);
            currentTransformation.peek().postTranslate(25f, 24.57f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForArrive.bezierRect;
            bezierRect.set(0.06f, 6.6f, 0.06f, 16.6f);
            Path bezierPath = CacheForArrive.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(0.06f, 6.6f);
            bezierPath.lineTo(0.06f, 16.6f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForArrive.bezier2Rect;
            bezier2Rect.set(-8f, -9.03f, 8f, 2.48f);
            Path bezier2Path = CacheForArrive.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(-2f, 2.48f);
            bezier2Path.cubicTo(-2f, 2.48f, -2f, 2.09f, -2f, 1.73f);
            bezier2Path.cubicTo(-2f, 1.46f, -2.23f, 1.12f, -2.5f, 1.12f);
            bezier2Path.cubicTo(-2.55f, 1.12f, -2.6f, 1.07f, -2.64f, 1.08f);
            bezier2Path.lineTo(-7.39f, 2.02f);
            bezier2Path.cubicTo(-7.39f, 2.02f, -7.46f, 2.01f, -7.5f, 2.01f);
            bezier2Path.cubicTo(-7.78f, 2.01f, -8f, 1.78f, -8f, 1.51f);
            bezier2Path.cubicTo(-8f, 1.37f, -7.95f, 1.25f, -7.86f, 1.16f);
            bezier2Path.lineTo(0f, -9.03f);
            bezier2Path.lineTo(7.86f, 1.16f);
            bezier2Path.cubicTo(7.95f, 1.25f, 8f, 1.37f, 8f, 1.5f);
            bezier2Path.cubicTo(8f, 1.77f, 7.78f, 2f, 7.5f, 2f);
            bezier2Path.cubicTo(7.46f, 2f, 7.39f, 1.99f, 7.39f, 1.99f);
            bezier2Path.lineTo(2.64f, 1.02f);
            bezier2Path.cubicTo(2.6f, 1.01f, 2.55f, 1f, 2.5f, 1f);
            bezier2Path.cubicTo(2.23f, 1f, 2f, 1.46f, 2f, 1.73f);
            bezier2Path.cubicTo(2f, 2.09f, 2f, 2.48f, 2f, 2.48f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier2Path, paint);
            
            // Oval
            RectF ovalRect = CacheForArrive.ovalRect;
            ovalRect.set(-3f, -16.6f, 3.1f, -10.5f);
            Path ovalPath = CacheForArrive.ovalPath;
            ovalPath.reset();
            ovalPath.addOval(ovalRect, Path.Direction.CW);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(ovalPath, paint);
            
            // Rectangle
            RectF rectangleRect = CacheForArrive.rectangleRect;
            rectangleRect.set(-2f, 3.63f, 2f, 5.58f);
            Path rectanglePath = CacheForArrive.rectanglePath;
            rectanglePath.reset();
            rectanglePath.moveTo(rectangleRect.left, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.top);
            rectanglePath.lineTo(rectangleRect.right, rectangleRect.bottom);
            rectanglePath.lineTo(rectangleRect.left, rectangleRect.bottom);
            rectanglePath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(rectanglePath, paint);
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForStarting {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawStarting(Canvas canvas, int primaryColor, float scale) {
        ManeuversStyleKit.drawStarting(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, scale);
    }
    
    public static void drawStarting(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForStarting.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForStarting.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForStarting.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Bezier 2
        canvas.save();
        canvas.translate(25f, 24.5f);
        currentTransformation.peek().postTranslate(25f, 24.5f);
        canvas.scale(scale, scale);
        currentTransformation.peek().postScale(scale, scale);
        RectF bezier2Rect = CacheForStarting.bezier2Rect;
        bezier2Rect.set(-10f, -10.5f, 10f, 10.5f);
        Path bezier2Path = CacheForStarting.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(0f, -10.5f);
        bezier2Path.lineTo(-10f, 10.5f);
        bezier2Path.lineTo(0.07f, 4.2f);
        bezier2Path.lineTo(10f, 10.5f);
        bezier2Path.lineTo(0f, -10.5f);
        bezier2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezier2Path.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(primaryColor);
        canvas.drawPath(bezier2Path, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForDestination {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
    }
    
    public static void drawDestination(Canvas canvas, int primaryColor, float scale) {
        ManeuversStyleKit.drawDestination(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, scale);
    }
    
    public static void drawDestination(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForDestination.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForDestination.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForDestination.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Bezier
        canvas.save();
        canvas.translate(25.16f, 20.86f);
        currentTransformation.peek().postTranslate(25.16f, 20.86f);
        canvas.scale(scale, scale);
        currentTransformation.peek().postScale(scale, scale);
        RectF bezierRect = CacheForDestination.bezierRect;
        bezierRect.set(-8.16f, -7.86f, 7.84f, 16.14f);
        Path bezierPath = CacheForDestination.bezierPath;
        bezierPath.reset();
        bezierPath.moveTo(-0.16f, 16.14f);
        bezierPath.cubicTo(-0.1f, 16.14f, 1.39f, 13.07f, 2.84f, 10.14f);
        bezierPath.cubicTo(4.3f, 7.2f, 7.84f, 4.14f, 7.84f, -0.53f);
        bezierPath.cubicTo(7.84f, -4.05f, 4.35f, -7.86f, -0.1f, -7.86f);
        bezierPath.cubicTo(-4.56f, -7.86f, -8.16f, -4.05f, -8.16f, -0.53f);
        bezierPath.cubicTo(-8.16f, 4.14f, -4.61f, 7.2f, -3.16f, 10.14f);
        bezierPath.cubicTo(-1.7f, 13.07f, -0.22f, 16.14f, -0.16f, 16.14f);
        bezierPath.close();
        bezierPath.moveTo(-0.15f, -2f);
        bezierPath.cubicTo(0.98f, -2f, 2.02f, -1f, 2.02f, 0.11f);
        bezierPath.cubicTo(2.02f, 1.23f, 0.98f, 2.4f, -0.17f, 2.4f);
        bezierPath.cubicTo(-1.3f, 2.4f, -2.34f, 1.22f, -2.34f, 0.1f);
        bezierPath.cubicTo(-2.34f, -1.01f, -1.29f, -2f, -0.15f, -2f);
        bezierPath.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        bezierPath.setFillType(Path.FillType.EVEN_ODD);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(primaryColor);
        canvas.drawPath(bezierPath, paint);
        canvas.restore();
        
        canvas.restore();
    }
    
    private static class CacheForMerge {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawMerge(Canvas canvas, int primaryColor, int secondaryColor, float scale) {
        ManeuversStyleKit.drawMerge(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, scale);
    }
    
    public static void drawMerge(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForMerge.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForMerge.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForMerge.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 3
        {
            canvas.save();
            canvas.translate(25.07f, 24.48f);
            currentTransformation.peek().postTranslate(25.07f, 24.48f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForMerge.bezierRect;
            bezierRect.set(-8.07f, -10.52f, -0.07f, 16.48f);
            Path bezierPath = CacheForMerge.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(-8.07f, 16.48f);
            bezierPath.lineTo(-8.07f, 12.47f);
            bezierPath.cubicTo(-8.07f, 10.53f, -7.44f, 8.64f, -6.28f, 7.09f);
            bezierPath.lineTo(-1.86f, 1.19f);
            bezierPath.cubicTo(-0.69f, -0.37f, -0.07f, -2.25f, -0.07f, -4.19f);
            bezierPath.lineTo(-0.07f, -10.52f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(secondaryColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForMerge.bezier2Rect;
            bezier2Rect.set(0.06f, -10.6f, 8.06f, 16.4f);
            Path bezier2Path = CacheForMerge.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(8.06f, 16.4f);
            bezier2Path.lineTo(8.06f, 12.39f);
            bezier2Path.cubicTo(8.06f, 10.45f, 7.43f, 8.56f, 6.27f, 7.01f);
            bezier2Path.lineTo(1.85f, 1.1f);
            bezier2Path.cubicTo(0.69f, -0.45f, 0.06f, -2.34f, 0.06f, -4.27f);
            bezier2Path.lineTo(0.06f, -10.6f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForMerge.bezier3Rect;
            bezier3Rect.set(-7.93f, -16.48f, 8.07f, -2.97f);
            Path bezier3Path = CacheForMerge.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(-7.8f, -6.29f);
            bezier3Path.lineTo(0.07f, -16.48f);
            bezier3Path.lineTo(7.93f, -6.29f);
            bezier3Path.cubicTo(8.01f, -6.2f, 8.07f, -6.08f, 8.07f, -5.95f);
            bezier3Path.cubicTo(8.07f, -5.68f, 7.84f, -5.45f, 7.57f, -5.45f);
            bezier3Path.cubicTo(7.53f, -5.45f, 7.45f, -5.47f, 7.45f, -5.47f);
            bezier3Path.lineTo(2.71f, -6.43f);
            bezier3Path.cubicTo(2.66f, -6.45f, 2.62f, -6.45f, 2.57f, -6.45f);
            bezier3Path.cubicTo(2.3f, -6.45f, 2.07f, -5.99f, 2.07f, -5.72f);
            bezier3Path.cubicTo(2.07f, -5.36f, 2.07f, -2.97f, 2.07f, -2.97f);
            bezier3Path.lineTo(0.07f, -2.97f);
            bezier3Path.lineTo(-1.94f, -2.97f);
            bezier3Path.cubicTo(-1.94f, -2.97f, -1.93f, -5.36f, -1.93f, -5.72f);
            bezier3Path.cubicTo(-1.93f, -5.99f, -2.16f, -6.33f, -2.43f, -6.33f);
            bezier3Path.cubicTo(-2.48f, -6.33f, -2.53f, -6.38f, -2.58f, -6.37f);
            bezier3Path.lineTo(-7.32f, -5.43f);
            bezier3Path.cubicTo(-7.32f, -5.43f, -7.4f, -5.44f, -7.43f, -5.44f);
            bezier3Path.cubicTo(-7.71f, -5.44f, -7.93f, -5.67f, -7.93f, -5.94f);
            bezier3Path.cubicTo(-7.93f, -6.08f, -7.88f, -6.2f, -7.8f, -6.29f);
            bezier3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForRoundabout {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
    }
    
    public static void drawRoundabout(Canvas canvas, int primaryColor, int secondaryColor, float scale) {
        ManeuversStyleKit.drawRoundabout(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, scale);
    }
    
    public static void drawRoundabout(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForRoundabout.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRoundabout.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForRoundabout.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 3
        {
            canvas.save();
            canvas.translate(28.01f, 22.99f);
            currentTransformation.peek().postTranslate(28.01f, 22.99f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Empty.
            
            canvas.restore();
        }
        
        // Group 4
        {
            canvas.save();
            canvas.translate(20.5f, 23.5f);
            currentTransformation.peek().postTranslate(20.5f, 23.5f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForRoundabout.bezierRect;
            bezierRect.set(-7.5f, -7.5f, 7.5f, 7.5f);
            Path bezierPath = CacheForRoundabout.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(7.5f, 0f);
            bezierPath.cubicTo(7.5f, 2.07f, 6.66f, 3.94f, 5.31f, 5.3f);
            bezierPath.cubicTo(3.95f, 6.66f, 2.08f, 7.5f, 0f, 7.5f);
            bezierPath.cubicTo(-2.07f, 7.5f, -3.94f, 6.67f, -5.29f, 5.32f);
            bezierPath.cubicTo(-6.66f, 3.96f, -7.5f, 2.08f, -7.5f, 0f);
            bezierPath.cubicTo(-7.5f, -2.07f, -6.66f, -3.95f, -5.3f, -5.3f);
            bezierPath.cubicTo(-3.95f, -6.66f, -2.07f, -7.5f, 0f, -7.5f);
            bezierPath.cubicTo(2.07f, -7.5f, 3.95f, -6.66f, 5.3f, -5.3f);
            bezierPath.cubicTo(6.66f, -3.95f, 7.5f, -2.07f, 7.5f, 0f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(secondaryColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForRoundabout.bezier3Rect;
            bezier3Rect.set(0f, 0f, 7.5f, 7.5f);
            Path bezier3Path = CacheForRoundabout.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(7.5f, 0f);
            bezier3Path.cubicTo(7.5f, 2.07f, 6.66f, 3.94f, 5.31f, 5.3f);
            bezier3Path.cubicTo(3.95f, 6.66f, 2.08f, 7.5f, 0f, 7.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForRoundabout.bezier4Rect;
            bezier4Rect.set(0.53f, 5.51f, 0.53f, 15.51f);
            Path bezier4Path = CacheForRoundabout.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(0.53f, 5.51f);
            bezier4Path.lineTo(0.53f, 15.51f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForRoundabout.bezier5Rect;
            bezier5Rect.set(5.53f, 0.5f, 14.53f, 0.51f);
            Path bezier5Path = CacheForRoundabout.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(5.53f, 0.51f);
            bezier5Path.lineTo(14.53f, 0.51f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForRoundabout.bezier6Rect;
            bezier6Rect.set(9.01f, -7.49f, 22.53f, 8.51f);
            Path bezier6Path = CacheForRoundabout.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(12.33f, 8.37f);
            bezier6Path.lineTo(22.53f, 0.51f);
            bezier6Path.lineTo(12.33f, -7.36f);
            bezier6Path.cubicTo(12.25f, -7.44f, 12.13f, -7.49f, 12f, -7.49f);
            bezier6Path.cubicTo(11.72f, -7.49f, 11.5f, -7.27f, 11.5f, -6.99f);
            bezier6Path.cubicTo(11.5f, -6.96f, 11.51f, -6.88f, 11.51f, -6.88f);
            bezier6Path.lineTo(12.47f, -2.14f);
            bezier6Path.cubicTo(12.49f, -2.09f, 12.5f, -2.04f, 12.5f, -1.99f);
            bezier6Path.cubicTo(12.5f, -1.72f, 12.03f, -1.49f, 11.77f, -1.49f);
            bezier6Path.cubicTo(11.41f, -1.49f, 9.01f, -1.5f, 9.01f, -1.5f);
            bezier6Path.lineTo(9.01f, 0.51f);
            bezier6Path.lineTo(9.01f, 2.51f);
            bezier6Path.cubicTo(9.01f, 2.51f, 11.41f, 2.51f, 11.77f, 2.51f);
            bezier6Path.cubicTo(12.03f, 2.51f, 12.37f, 2.73f, 12.37f, 3.01f);
            bezier6Path.cubicTo(12.37f, 3.05f, 12.43f, 3.1f, 12.41f, 3.15f);
            bezier6Path.lineTo(11.48f, 7.89f);
            bezier6Path.cubicTo(11.48f, 7.89f, 11.48f, 7.97f, 11.48f, 8.01f);
            bezier6Path.cubicTo(11.48f, 8.28f, 11.71f, 8.51f, 11.99f, 8.51f);
            bezier6Path.cubicTo(12.12f, 8.51f, 12.25f, 8.45f, 12.33f, 8.37f);
            bezier6Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier6Path, paint);
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForFork {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF group3 = new RectF();
        private static Path clipPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawFork(Canvas canvas, int primaryColor, int secondaryColor, float scale) {
        ManeuversStyleKit.drawFork(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, scale);
    }
    
    public static void drawFork(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForFork.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForFork.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForFork.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 3
        {
            RectF group3 = CacheForFork.group3;
            group3.set(-13.6f, -13.39f, 11.55f, 15.41f);
            canvas.save();
            canvas.translate(25.57f, 25.42f);
            currentTransformation.peek().postTranslate(25.57f, 25.42f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Clip
            Path clipPath = CacheForFork.clipPath;
            clipPath.reset();
            clipPath.moveTo(group3.left, group3.top);
            clipPath.lineTo(group3.right, group3.top);
            clipPath.lineTo(group3.right, group3.bottom);
            clipPath.lineTo(group3.left, group3.bottom);
            clipPath.close();
            canvas.clipPath(clipPath);
            
            // Bezier
            RectF bezierRect = CacheForFork.bezierRect;
            bezierRect.set(1.11f, -12.73f, 9.58f, 15.32f);
            Path bezierPath = CacheForFork.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(1.11f, 15.32f);
            bezierPath.lineTo(1.11f, 9f);
            bezierPath.cubicTo(1.11f, 7.06f, 1.74f, 5.17f, 2.9f, 3.62f);
            bezierPath.lineTo(7.33f, -2.29f);
            bezierPath.cubicTo(8.49f, -3.84f, 9.58f, -5.73f, 9.58f, -7.67f);
            bezierPath.lineTo(9.58f, -12.73f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(secondaryColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForFork.bezier2Rect;
            bezier2Rect.set(-5.22f, -2.2f, 0.99f, 15.41f);
            Path bezier2Path = CacheForFork.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(-5.22f, -2.2f);
            bezier2Path.lineTo(-0.8f, 3.7f);
            bezier2Path.cubicTo(0.36f, 5.25f, 0.99f, 7.14f, 0.99f, 9.08f);
            bezier2Path.lineTo(0.99f, 15.41f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForFork.bezier3Rect;
            bezier3Rect.set(-13.57f, -13.42f, -0f, 0f);
            Path bezier3Path = CacheForFork.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(-0.39f, -9.17f);
            bezier3Path.lineTo(-12.54f, -13.42f);
            bezier3Path.lineTo(-13.56f, -0.59f);
            bezier3Path.cubicTo(-13.59f, -0.47f, -13.57f, -0.34f, -13.49f, -0.23f);
            bezier3Path.cubicTo(-13.34f, 0f, -13.03f, 0.07f, -12.8f, -0.08f);
            bezier3Path.cubicTo(-12.77f, -0.1f, -12.71f, -0.15f, -12.71f, -0.15f);
            bezier3Path.lineTo(-9.27f, -3.55f);
            bezier3Path.cubicTo(-9.24f, -3.59f, -9.2f, -3.62f, -9.16f, -3.65f);
            bezier3Path.cubicTo(-8.93f, -3.8f, -8.48f, -3.53f, -8.34f, -3.31f);
            bezier3Path.cubicTo(-8.14f, -3.01f, -6.84f, -1f, -6.84f, -1f);
            bezier3Path.lineTo(-5.16f, -2.09f);
            bezier3Path.lineTo(-3.48f, -3.19f);
            bezier3Path.cubicTo(-3.48f, -3.19f, -4.79f, -5.19f, -4.99f, -5.49f);
            bezier3Path.cubicTo(-5.13f, -5.71f, -5.13f, -6.13f, -4.9f, -6.28f);
            bezier3Path.cubicTo(-4.86f, -6.3f, -4.85f, -6.37f, -4.8f, -6.39f);
            bezier3Path.lineTo(-0.32f, -8.19f);
            bezier3Path.cubicTo(-0.32f, -8.19f, -0.26f, -8.23f, -0.22f, -8.26f);
            bezier3Path.cubicTo(0.01f, -8.41f, 0.07f, -8.72f, -0.08f, -8.95f);
            bezier3Path.cubicTo(-0.15f, -9.06f, -0.27f, -9.14f, -0.39f, -9.17f);
            bezier3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForOfframp {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF group3 = new RectF();
        private static Path clipPath = new Path();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
    }
    
    public static void drawOfframp(Canvas canvas, int primaryColor, int secondaryColor, float scale) {
        ManeuversStyleKit.drawOfframp(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, scale);
    }
    
    public static void drawOfframp(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForOfframp.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForOfframp.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForOfframp.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 3
        {
            RectF group3 = CacheForOfframp.group3;
            group3.set(-13.38f, -14.23f, 7.02f, 12.52f);
            canvas.save();
            canvas.translate(25.38f, 27.24f);
            currentTransformation.peek().postTranslate(25.38f, 27.24f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Clip
            Path clipPath = CacheForOfframp.clipPath;
            clipPath.reset();
            clipPath.moveTo(group3.left, group3.top);
            clipPath.lineTo(group3.right, group3.top);
            clipPath.lineTo(group3.right, group3.bottom);
            clipPath.lineTo(group3.left, group3.bottom);
            clipPath.close();
            canvas.clipPath(clipPath);
            
            // Bezier
            RectF bezierRect = CacheForOfframp.bezierRect;
            bezierRect.set(4.88f, -14.22f, 5.01f, 12.42f);
            Path bezierPath = CacheForOfframp.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(4.88f, 12.42f);
            bezierPath.lineTo(4.88f, 6.51f);
            bezierPath.cubicTo(4.88f, 4.71f, 5.01f, -14.22f, 5.01f, -14.22f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(secondaryColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForOfframp.bezier2Rect;
            bezier2Rect.set(-4.57f, -5.39f, 4.76f, 12.5f);
            Path bezier2Path = CacheForOfframp.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(-4.57f, -5.39f);
            bezier2Path.lineTo(2.97f, 0.8f);
            bezier2Path.cubicTo(4.13f, 2.35f, 4.76f, 4.23f, 4.76f, 6.17f);
            bezier2Path.lineTo(4.76f, 12.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForOfframp.bezier3Rect;
            bezier3Rect.set(-13.38f, -13.06f, -0f, -0f);
            Path bezier3Path = CacheForOfframp.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(-0.53f, -12.35f);
            bezier3Path.lineTo(-13.38f, -13.06f);
            bezier3Path.lineTo(-10.81f, -0.45f);
            bezier3Path.cubicTo(-10.8f, -0.33f, -10.74f, -0.21f, -10.65f, -0.12f);
            bezier3Path.cubicTo(-10.44f, 0.06f, -10.12f, 0.04f, -9.94f, -0.17f);
            bezier3Path.cubicTo(-9.91f, -0.2f, -9.88f, -0.27f, -9.88f, -0.27f);
            bezier3Path.lineTo(-7.5f, -4.49f);
            bezier3Path.cubicTo(-7.49f, -4.53f, -7.46f, -4.57f, -7.43f, -4.61f);
            bezier3Path.cubicTo(-7.25f, -4.82f, -6.75f, -4.68f, -6.55f, -4.51f);
            bezier3Path.cubicTo(-6.28f, -4.28f, -4.47f, -2.71f, -4.47f, -2.71f);
            bezier3Path.lineTo(-3.16f, -4.22f);
            bezier3Path.lineTo(-1.85f, -5.74f);
            bezier3Path.cubicTo(-1.85f, -5.74f, -3.66f, -7.3f, -3.93f, -7.54f);
            bezier3Path.cubicTo(-4.13f, -7.71f, -4.24f, -8.11f, -4.07f, -8.31f);
            bezier3Path.cubicTo(-4.03f, -8.35f, -4.04f, -8.42f, -4f, -8.45f);
            bezier3Path.lineTo(-0.19f, -11.43f);
            bezier3Path.cubicTo(-0.19f, -11.43f, -0.14f, -11.48f, -0.12f, -11.51f);
            bezier3Path.cubicTo(0.06f, -11.72f, 0.03f, -12.04f, -0.18f, -12.22f);
            bezier3Path.cubicTo(-0.28f, -12.31f, -0.41f, -12.35f, -0.53f, -12.35f);
            bezier3Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForRoundabout_180 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
    }
    
    public static void drawRoundabout_180(Canvas canvas, int primaryColor, int secondaryColor, float scale) {
        ManeuversStyleKit.drawRoundabout_180(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, scale);
    }
    
    public static void drawRoundabout_180(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForRoundabout_180.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRoundabout_180.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForRoundabout_180.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 2
        {
            canvas.save();
            canvas.translate(25f, 24.37f);
            currentTransformation.peek().postTranslate(25f, 24.37f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForRoundabout_180.bezierRect;
            bezierRect.set(-8f, -3.64f, 7f, 11.36f);
            Path bezierPath = CacheForRoundabout_180.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(7f, 3.86f);
            bezierPath.cubicTo(7f, 5.93f, 6.16f, 7.8f, 4.81f, 9.16f);
            bezierPath.cubicTo(3.45f, 10.52f, 1.57f, 11.36f, -0.5f, 11.36f);
            bezierPath.cubicTo(-2.57f, 11.36f, -4.44f, 10.53f, -5.79f, 9.18f);
            bezierPath.cubicTo(-7.16f, 7.82f, -8f, 5.94f, -8f, 3.86f);
            bezierPath.cubicTo(-8f, 1.79f, -7.16f, -0.08f, -5.81f, -1.44f);
            bezierPath.cubicTo(-4.45f, -2.8f, -2.57f, -3.64f, -0.5f, -3.64f);
            bezierPath.cubicTo(1.57f, -3.64f, 3.44f, -2.8f, 4.8f, -1.44f);
            bezierPath.cubicTo(6.16f, -0.08f, 7f, 1.79f, 7f, 3.86f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(secondaryColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 2
            RectF bezier2Rect = CacheForRoundabout_180.bezier2Rect;
            bezier2Rect.set(0.02f, 9.37f, 0.02f, 19.37f);
            Path bezier2Path = CacheForRoundabout_180.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(0.02f, 9.37f);
            bezier2Path.lineTo(0.02f, 19.37f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForRoundabout_180.bezier3Rect;
            bezier3Rect.set(-0.51f, -3.64f, 6.99f, 11.36f);
            Path bezier3Path = CacheForRoundabout_180.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(-0.51f, -3.64f);
            bezier3Path.cubicTo(1.56f, -3.64f, 3.44f, -2.8f, 4.79f, -1.44f);
            bezier3Path.cubicTo(6.15f, -0.08f, 6.99f, 1.79f, 6.99f, 3.86f);
            bezier3Path.cubicTo(6.99f, 5.93f, 6.15f, 7.8f, 4.8f, 9.16f);
            bezier3Path.cubicTo(3.44f, 10.52f, 1.56f, 11.36f, -0.51f, 11.36f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForRoundabout_180.bezier4Rect;
            bezier4Rect.set(-8f, -19.37f, 8f, -1.63f);
            Path bezier4Path = CacheForRoundabout_180.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(2.02f, -8.63f);
            bezier4Path.cubicTo(2.03f, -8.9f, 2.24f, -9.34f, 2.5f, -9.34f);
            bezier4Path.cubicTo(2.55f, -9.34f, 2.6f, -9.33f, 2.65f, -9.32f);
            bezier4Path.lineTo(7.39f, -8.35f);
            bezier4Path.cubicTo(7.39f, -8.35f, 7.46f, -8.34f, 7.5f, -8.34f);
            bezier4Path.cubicTo(7.78f, -8.34f, 8f, -8.56f, 8f, -8.84f);
            bezier4Path.cubicTo(8f, -8.97f, 7.95f, -9.09f, 7.87f, -9.18f);
            bezier4Path.lineTo(0f, -19.37f);
            bezier4Path.lineTo(-7.86f, -9.18f);
            bezier4Path.cubicTo(-7.94f, -9.09f, -8f, -8.96f, -8f, -8.83f);
            bezier4Path.cubicTo(-8f, -8.55f, -7.77f, -8.32f, -7.5f, -8.32f);
            bezier4Path.cubicTo(-7.46f, -8.32f, -7.38f, -8.32f, -7.38f, -8.32f);
            bezier4Path.lineTo(-2.64f, -9.26f);
            bezier4Path.cubicTo(-2.55f, -9.25f, -2.48f, -9.25f, -2.44f, -9.23f);
            bezier4Path.cubicTo(-2.18f, -9.14f, -1.98f, -8.89f, -1.98f, -8.63f);
            bezier4Path.lineTo(-1.98f, -1.63f);
            bezier4Path.lineTo(2.02f, -1.63f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier4Path, paint);
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForRoundabout_45 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
    }
    
    public static void drawRoundabout_45(Canvas canvas, int primaryColor, int secondaryColor, float scale) {
        ManeuversStyleKit.drawRoundabout_45(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, scale);
    }
    
    public static void drawRoundabout_45(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForRoundabout_45.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRoundabout_45.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForRoundabout_45.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 3
        {
            canvas.save();
            canvas.translate(22.5f, 22.5f);
            currentTransformation.peek().postTranslate(22.5f, 22.5f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForRoundabout_45.bezierRect;
            bezierRect.set(4.9f, 1.55f, 18.33f, 14.43f);
            Path bezierPath = CacheForRoundabout_45.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(5.45f, 14.43f);
            bezierPath.lineTo(18.33f, 14.42f);
            bezierPath.lineTo(15.06f, 1.97f);
            bezierPath.cubicTo(15.04f, 1.85f, 14.98f, 1.74f, 14.88f, 1.66f);
            bezierPath.cubicTo(14.66f, 1.49f, 14.34f, 1.53f, 14.17f, 1.75f);
            bezierPath.cubicTo(14.15f, 1.78f, 14.12f, 1.85f, 14.12f, 1.85f);
            bezierPath.lineTo(11.98f, 6.19f);
            bezierPath.cubicTo(11.97f, 6.24f, 11.94f, 6.28f, 11.91f, 6.32f);
            bezierPath.cubicTo(11.75f, 6.53f, 11.24f, 6.43f, 11.03f, 6.27f);
            bezierPath.cubicTo(10.74f, 6.05f, 8.85f, 4.58f, 8.85f, 4.58f);
            bezierPath.lineTo(7.63f, 6.17f);
            bezierPath.lineTo(6.4f, 7.76f);
            bezierPath.cubicTo(6.4f, 7.76f, 8.3f, 9.22f, 8.59f, 9.44f);
            bezierPath.cubicTo(8.79f, 9.6f, 8.93f, 9.99f, 8.76f, 10.2f);
            bezierPath.cubicTo(8.73f, 10.24f, 8.74f, 10.31f, 8.71f, 10.34f);
            bezierPath.lineTo(5.07f, 13.53f);
            bezierPath.cubicTo(5.07f, 13.53f, 5.02f, 13.59f, 5f, 13.62f);
            bezierPath.cubicTo(4.83f, 13.83f, 4.88f, 14.15f, 5.1f, 14.32f);
            bezierPath.cubicTo(5.2f, 14.4f, 5.33f, 14.44f, 5.45f, 14.43f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezierPath, paint);
            
            // Bezier 2
            RectF bezier2Rect = CacheForRoundabout_45.bezier2Rect;
            bezier2Rect.set(-7.5f, -7.5f, 7.5f, 7.5f);
            Path bezier2Path = CacheForRoundabout_45.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(7.5f, 0f);
            bezier2Path.cubicTo(7.5f, 2.07f, 6.66f, 3.94f, 5.31f, 5.3f);
            bezier2Path.cubicTo(3.95f, 6.66f, 2.08f, 7.5f, 0f, 7.5f);
            bezier2Path.cubicTo(-2.07f, 7.5f, -3.94f, 6.67f, -5.29f, 5.32f);
            bezier2Path.cubicTo(-6.66f, 3.96f, -7.5f, 2.08f, -7.5f, 0f);
            bezier2Path.cubicTo(-7.5f, -2.07f, -6.66f, -3.95f, -5.3f, -5.3f);
            bezier2Path.cubicTo(-3.95f, -6.66f, -2.07f, -7.5f, 0f, -7.5f);
            bezier2Path.cubicTo(2.07f, -7.5f, 3.95f, -6.66f, 5.3f, -5.3f);
            bezier2Path.cubicTo(6.66f, -3.95f, 7.5f, -2.07f, 7.5f, 0f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(secondaryColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForRoundabout_45.bezier3Rect;
            bezier3Rect.set(-0.47f, 5.51f, -0.47f, 16.51f);
            Path bezier3Path = CacheForRoundabout_45.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(-0.47f, 5.51f);
            bezier3Path.lineTo(-0.47f, 16.51f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForRoundabout_45.bezier4Rect;
            bezier4Rect.set(4.07f, 3.63f, 11.9f, 9.26f);
            Path bezier4Path = CacheForRoundabout_45.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(4.07f, 3.63f);
            bezier4Path.lineTo(11.9f, 9.26f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForRoundabout_45.bezier5Rect;
            bezier5Rect.set(-0f, 5.3f, 5.31f, 7.5f);
            Path bezier5Path = CacheForRoundabout_45.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(5.31f, 5.3f);
            bezier5Path.cubicTo(3.95f, 6.66f, 2.08f, 7.5f, -0f, 7.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForRoundabout_315 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
    }
    
    public static void drawRoundabout_315(Canvas canvas, int primaryColor, int secondaryColor, float scale) {
        ManeuversStyleKit.drawRoundabout_315(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, scale);
    }
    
    public static void drawRoundabout_315(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForRoundabout_315.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRoundabout_315.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForRoundabout_315.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 3
        {
            canvas.save();
            canvas.translate(23.43f, 22.05f);
            currentTransformation.peek().postTranslate(23.43f, 22.05f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForRoundabout_315.bezierRect;
            bezierRect.set(-13.43f, 0f, 0f, 12.87f);
            Path bezierPath = CacheForRoundabout_315.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(-0.56f, 12.87f);
            bezierPath.lineTo(-13.43f, 12.87f);
            bezierPath.lineTo(-10.16f, 0.42f);
            bezierPath.cubicTo(-10.14f, 0.3f, -10.08f, 0.18f, -9.98f, 0.1f);
            bezierPath.cubicTo(-9.76f, -0.06f, -9.44f, -0.02f, -9.28f, 0.19f);
            bezierPath.cubicTo(-9.25f, 0.22f, -9.22f, 0.29f, -9.22f, 0.29f);
            bezierPath.lineTo(-7.08f, 4.64f);
            bezierPath.cubicTo(-7.07f, 4.68f, -7.04f, 4.73f, -7.01f, 4.76f);
            bezierPath.cubicTo(-6.85f, 4.98f, -6.34f, 4.88f, -6.13f, 4.72f);
            bezierPath.cubicTo(-5.85f, 4.49f, -3.95f, 3.03f, -3.95f, 3.03f);
            bezierPath.lineTo(-2.73f, 4.62f);
            bezierPath.lineTo(-1.5f, 6.2f);
            bezierPath.cubicTo(-1.5f, 6.2f, -3.4f, 7.66f, -3.69f, 7.88f);
            bezierPath.cubicTo(-3.9f, 8.04f, -4.03f, 8.43f, -3.86f, 8.65f);
            bezierPath.cubicTo(-3.83f, 8.69f, -3.85f, 8.76f, -3.81f, 8.79f);
            bezierPath.lineTo(-0.17f, 11.97f);
            bezierPath.cubicTo(-0.17f, 11.97f, -0.13f, 12.03f, -0.1f, 12.06f);
            bezierPath.cubicTo(0.07f, 12.28f, 0.02f, 12.6f, -0.2f, 12.77f);
            bezierPath.cubicTo(-0.3f, 12.85f, -0.43f, 12.88f, -0.56f, 12.87f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezierPath, paint);
            
            // Bezier 2
            RectF bezier2Rect = CacheForRoundabout_315.bezier2Rect;
            bezier2Rect.set(-2f, -8.05f, 13f, 6.95f);
            Path bezier2Path = CacheForRoundabout_315.bezier2Path;
            bezier2Path.reset();
            bezier2Path.moveTo(13f, -0.55f);
            bezier2Path.cubicTo(13f, 1.51f, 12.17f, 3.38f, 10.82f, 4.74f);
            bezier2Path.cubicTo(9.46f, 6.1f, 7.58f, 6.95f, 5.5f, 6.95f);
            bezier2Path.cubicTo(3.44f, 6.95f, 1.57f, 6.11f, 0.21f, 4.76f);
            bezier2Path.cubicTo(-1.15f, 3.4f, -2f, 1.52f, -2f, -0.55f);
            bezier2Path.cubicTo(-2f, -2.62f, -1.16f, -4.5f, 0.2f, -5.86f);
            bezier2Path.cubicTo(1.56f, -7.21f, 3.43f, -8.05f, 5.5f, -8.05f);
            bezier2Path.cubicTo(7.57f, -8.05f, 9.45f, -7.21f, 10.81f, -5.86f);
            bezier2Path.cubicTo(12.16f, -4.5f, 13f, -2.62f, 13f, -0.55f);
            bezier2Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(secondaryColor);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForRoundabout_315.bezier3Rect;
            bezier3Rect.set(5.03f, 4.95f, 5.03f, 15.95f);
            Path bezier3Path = CacheForRoundabout_315.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(5.03f, 4.95f);
            bezier3Path.lineTo(5.03f, 15.95f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForRoundabout_315.bezier4Rect;
            bezier4Rect.set(-7f, 2.08f, 0.83f, 7.7f);
            Path bezier4Path = CacheForRoundabout_315.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(0.83f, 2.08f);
            bezier4Path.lineTo(-7f, 7.7f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForRoundabout_315.bezier5Rect;
            bezier5Rect.set(-2f, -8.05f, 13f, 6.95f);
            Path bezier5Path = CacheForRoundabout_315.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(0.21f, 4.76f);
            bezier5Path.cubicTo(-1.15f, 3.4f, -2f, 1.52f, -2f, -0.55f);
            bezier5Path.cubicTo(-2f, -2.62f, -1.16f, -4.5f, 0.2f, -5.86f);
            bezier5Path.cubicTo(1.56f, -7.21f, 3.43f, -8.05f, 5.5f, -8.05f);
            bezier5Path.cubicTo(7.57f, -8.05f, 9.45f, -7.21f, 10.81f, -5.86f);
            bezier5Path.cubicTo(12.16f, -4.5f, 13f, -2.62f, 13f, -0.55f);
            bezier5Path.cubicTo(13f, 1.51f, 12.17f, 3.39f, 10.81f, 4.74f);
            bezier5Path.cubicTo(9.46f, 6.1f, 7.58f, 6.95f, 5.5f, 6.95f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForRoundabout_275 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
    }
    
    public static void drawRoundabout_275(Canvas canvas, int primaryColor, int secondaryColor, float scale) {
        ManeuversStyleKit.drawRoundabout_275(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, scale);
    }
    
    public static void drawRoundabout_275(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForRoundabout_275.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRoundabout_275.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForRoundabout_275.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 3
        {
            canvas.save();
            canvas.translate(24f, 24f);
            currentTransformation.peek().postTranslate(24f, 24f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForRoundabout_275.bezierRect;
            bezierRect.set(-2.03f, -8f, 12.97f, 7f);
            Path bezierPath = CacheForRoundabout_275.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(12.97f, -0.5f);
            bezierPath.cubicTo(12.97f, 1.56f, 12.14f, 3.43f, 10.79f, 4.79f);
            bezierPath.cubicTo(9.43f, 6.15f, 7.55f, 7f, 5.47f, 7f);
            bezierPath.cubicTo(3.41f, 7f, 1.54f, 6.16f, 0.18f, 4.81f);
            bezierPath.cubicTo(-1.18f, 3.45f, -2.03f, 1.57f, -2.03f, -0.5f);
            bezierPath.cubicTo(-2.03f, -2.58f, -1.19f, -4.45f, 0.17f, -5.81f);
            bezierPath.cubicTo(1.53f, -7.17f, 3.4f, -8f, 5.47f, -8f);
            bezierPath.cubicTo(7.55f, -8f, 9.42f, -7.17f, 10.78f, -5.81f);
            bezierPath.cubicTo(12.14f, -4.45f, 12.97f, -2.58f, 12.97f, -0.5f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(secondaryColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForRoundabout_275.bezier3Rect;
            bezier3Rect.set(6f, 5f, 6f, 15f);
            Path bezier3Path = CacheForRoundabout_275.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(6f, 5f);
            bezier3Path.lineTo(6f, 15f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForRoundabout_275.bezier4Rect;
            bezier4Rect.set(-2.03f, -8f, 12.97f, 7f);
            Path bezier4Path = CacheForRoundabout_275.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(-2.03f, -0.5f);
            bezier4Path.cubicTo(-2.03f, -2.58f, -1.19f, -4.45f, 0.17f, -5.81f);
            bezier4Path.cubicTo(1.53f, -7.17f, 3.4f, -8f, 5.47f, -8f);
            bezier4Path.cubicTo(7.55f, -8f, 9.42f, -7.17f, 10.78f, -5.81f);
            bezier4Path.cubicTo(12.14f, -4.45f, 12.97f, -2.58f, 12.97f, -0.5f);
            bezier4Path.cubicTo(12.97f, 1.56f, 12.14f, 3.43f, 10.79f, 4.79f);
            bezier4Path.cubicTo(9.43f, 6.15f, 7.55f, 7f, 5.47f, 7f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForRoundabout_275.bezier5Rect;
            bezier5Rect.set(-9f, 0f, 0f, 0f);
            Path bezier5Path = CacheForRoundabout_275.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(0f, 0f);
            bezier5Path.lineTo(-9f, 0f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForRoundabout_275.bezier6Rect;
            bezier6Rect.set(-17f, -8f, -3.48f, 8f);
            Path bezier6Path = CacheForRoundabout_275.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(-6.81f, 7.86f);
            bezier6Path.lineTo(-17f, 0f);
            bezier6Path.lineTo(-6.81f, -7.86f);
            bezier6Path.cubicTo(-6.72f, -7.95f, -6.6f, -8f, -6.47f, -8f);
            bezier6Path.cubicTo(-6.19f, -8f, -5.97f, -7.77f, -5.97f, -7.5f);
            bezier6Path.cubicTo(-5.97f, -7.46f, -5.98f, -7.39f, -5.98f, -7.39f);
            bezier6Path.lineTo(-6.95f, -2.64f);
            bezier6Path.cubicTo(-6.96f, -2.6f, -6.97f, -2.55f, -6.97f, -2.5f);
            bezier6Path.cubicTo(-6.97f, -2.23f, -6.5f, -2f, -6.24f, -2f);
            bezier6Path.cubicTo(-5.88f, -2f, -3.48f, -2f, -3.48f, -2f);
            bezier6Path.lineTo(-3.48f, 0f);
            bezier6Path.lineTo(-3.48f, 2.01f);
            bezier6Path.cubicTo(-3.48f, 2.01f, -5.88f, 2f, -6.24f, 2f);
            bezier6Path.cubicTo(-6.5f, 2f, -6.85f, 2.23f, -6.85f, 2.5f);
            bezier6Path.cubicTo(-6.85f, 2.55f, -6.9f, 2.6f, -6.89f, 2.64f);
            bezier6Path.lineTo(-5.95f, 7.39f);
            bezier6Path.cubicTo(-5.95f, 7.39f, -5.95f, 7.46f, -5.95f, 7.5f);
            bezier6Path.cubicTo(-5.95f, 7.78f, -6.19f, 8f, -6.46f, 8f);
            bezier6Path.cubicTo(-6.59f, 8f, -6.72f, 7.95f, -6.81f, 7.86f);
            bezier6Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier6Path, paint);
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    private static class CacheForRoundabout_90 {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 50f, 50f);
        private static RectF resizedFrame = new RectF();
        private static RectF bezierRect = new RectF();
        private static Path bezierPath = new Path();
        private static RectF bezier3Rect = new RectF();
        private static Path bezier3Path = new Path();
        private static RectF bezier4Rect = new RectF();
        private static Path bezier4Path = new Path();
        private static RectF bezier5Rect = new RectF();
        private static Path bezier5Path = new Path();
        private static RectF bezier6Rect = new RectF();
        private static Path bezier6Path = new Path();
    }
    
    public static void drawRoundabout_90(Canvas canvas, int primaryColor, int secondaryColor, float scale) {
        ManeuversStyleKit.drawRoundabout_90(canvas, new RectF(0f, 0f, 50f, 50f), ResizingBehavior.AspectFit, primaryColor, secondaryColor, scale);
    }
    
    public static void drawRoundabout_90(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int primaryColor, int secondaryColor, float scale) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForRoundabout_90.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRoundabout_90.resizedFrame;
        ManeuversStyleKit.resizingBehaviorApply(resizing, CacheForRoundabout_90.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 50f, resizedFrame.height() / 50f);
        
        // Group 4
        {
            canvas.save();
            canvas.translate(20.5f, 23.5f);
            currentTransformation.peek().postTranslate(20.5f, 23.5f);
            canvas.scale(scale, scale);
            currentTransformation.peek().postScale(scale, scale);
            
            // Bezier
            RectF bezierRect = CacheForRoundabout_90.bezierRect;
            bezierRect.set(-7.5f, -7.5f, 7.5f, 7.5f);
            Path bezierPath = CacheForRoundabout_90.bezierPath;
            bezierPath.reset();
            bezierPath.moveTo(7.5f, 0f);
            bezierPath.cubicTo(7.5f, 2.07f, 6.66f, 3.94f, 5.31f, 5.3f);
            bezierPath.cubicTo(3.95f, 6.66f, 2.08f, 7.5f, 0f, 7.5f);
            bezierPath.cubicTo(-2.07f, 7.5f, -3.94f, 6.67f, -5.29f, 5.32f);
            bezierPath.cubicTo(-6.66f, 3.96f, -7.5f, 2.08f, -7.5f, 0f);
            bezierPath.cubicTo(-7.5f, -2.07f, -6.66f, -3.95f, -5.3f, -5.3f);
            bezierPath.cubicTo(-3.95f, -6.66f, -2.07f, -7.5f, 0f, -7.5f);
            bezierPath.cubicTo(2.07f, -7.5f, 3.95f, -6.66f, 5.3f, -5.3f);
            bezierPath.cubicTo(6.66f, -3.95f, 7.5f, -2.07f, 7.5f, 0f);
            bezierPath.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(secondaryColor);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
            
            // Bezier 3
            RectF bezier3Rect = CacheForRoundabout_90.bezier3Rect;
            bezier3Rect.set(0f, 0f, 7.5f, 7.5f);
            Path bezier3Path = CacheForRoundabout_90.bezier3Path;
            bezier3Path.reset();
            bezier3Path.moveTo(7.5f, 0f);
            bezier3Path.cubicTo(7.5f, 2.07f, 6.66f, 3.94f, 5.31f, 5.3f);
            bezier3Path.cubicTo(3.95f, 6.66f, 2.08f, 7.5f, 0f, 7.5f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeJoin(Paint.Join.ROUND);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier3Path, paint);
            canvas.restore();
            
            // Bezier 4
            RectF bezier4Rect = CacheForRoundabout_90.bezier4Rect;
            bezier4Rect.set(0.53f, 5.51f, 0.53f, 15.51f);
            Path bezier4Path = CacheForRoundabout_90.bezier4Path;
            bezier4Path.reset();
            bezier4Path.moveTo(0.53f, 5.51f);
            bezier4Path.lineTo(0.53f, 15.51f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();
            
            // Bezier 5
            RectF bezier5Rect = CacheForRoundabout_90.bezier5Rect;
            bezier5Rect.set(5.53f, 0.5f, 14.53f, 0.51f);
            Path bezier5Path = CacheForRoundabout_90.bezier5Path;
            bezier5Path.reset();
            bezier5Path.moveTo(5.53f, 0.51f);
            bezier5Path.lineTo(14.53f, 0.51f);
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(4f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();
            
            // Bezier 6
            RectF bezier6Rect = CacheForRoundabout_90.bezier6Rect;
            bezier6Rect.set(9.01f, -7.49f, 22.53f, 8.51f);
            Path bezier6Path = CacheForRoundabout_90.bezier6Path;
            bezier6Path.reset();
            bezier6Path.moveTo(12.33f, 8.37f);
            bezier6Path.lineTo(22.53f, 0.51f);
            bezier6Path.lineTo(12.33f, -7.36f);
            bezier6Path.cubicTo(12.25f, -7.44f, 12.13f, -7.49f, 12f, -7.49f);
            bezier6Path.cubicTo(11.72f, -7.49f, 11.5f, -7.27f, 11.5f, -6.99f);
            bezier6Path.cubicTo(11.5f, -6.96f, 11.51f, -6.88f, 11.51f, -6.88f);
            bezier6Path.lineTo(12.47f, -2.14f);
            bezier6Path.cubicTo(12.49f, -2.09f, 12.5f, -2.04f, 12.5f, -1.99f);
            bezier6Path.cubicTo(12.5f, -1.72f, 12.03f, -1.49f, 11.77f, -1.49f);
            bezier6Path.cubicTo(11.41f, -1.49f, 9.01f, -1.5f, 9.01f, -1.5f);
            bezier6Path.lineTo(9.01f, 0.51f);
            bezier6Path.lineTo(9.01f, 2.51f);
            bezier6Path.cubicTo(9.01f, 2.51f, 11.41f, 2.51f, 11.77f, 2.51f);
            bezier6Path.cubicTo(12.03f, 2.51f, 12.37f, 2.73f, 12.37f, 3.01f);
            bezier6Path.cubicTo(12.37f, 3.05f, 12.43f, 3.1f, 12.41f, 3.15f);
            bezier6Path.lineTo(11.48f, 7.89f);
            bezier6Path.cubicTo(11.48f, 7.89f, 11.48f, 7.97f, 11.48f, 8.01f);
            bezier6Path.cubicTo(11.48f, 8.28f, 11.71f, 8.51f, 11.99f, 8.51f);
            bezier6Path.cubicTo(12.12f, 8.51f, 12.25f, 8.45f, 12.33f, 8.37f);
            bezier6Path.close();
            
            paint.reset();
            paint.setFlags(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(primaryColor);
            canvas.drawPath(bezier6Path, paint);
            
            canvas.restore();
        }
        
        canvas.restore();
    }
    
    
    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }
        
        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }
        
        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;
        
        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
            default:
                break;
        }
        
        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
            target.centerY() - newHeight / 2,
            target.centerX() + newWidth / 2,
            target.centerY() + newHeight / 2);
    }
    
    
}